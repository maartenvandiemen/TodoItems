parameters:
- name: template
  type: string
- name: additionalParameters
  type: string
  default: ''
- name: modus
  type: string
  default: validation
  values:
  - validation
  - deploy

jobs:
#Seperate job for generating resourcegroupName. 
#In case the deployment fails, the Create_Env job can be executed again and the same resourcegroup is used as in the previous attempt.
- job: Generate_ResourcegroupName
  steps:
  - checkout: none
  - powershell: |
      $randomNumber = Get-Random -Minimum 10000000000 -Maximum 99999999999
      $resourcegroupname="todoItems-$randomNumber"
      Write-Host "##vso[task.setvariable variable=resourcegroupName;isoutput=true]$resourcegroupname"
    name: DetermineResourcegroupName
    displayName: Determine resourcegroup name

- job: Create_Env
  dependsOn: [Generate_ResourcegroupName]
  variables: 
  - group: AzureSecrets
  - name: resourcegroupName
    value: $[ dependencies.Generate_ResourcegroupName.outputs['DetermineResourcegroupName.resourcegroupName'] ]
  steps:
  - checkout: none
  - download: current
    artifact: infraCode
    displayName: Download Bicep files
  - task: AzureCLI@2
    displayName: Create resourcegroup
    inputs:
      azureSubscription: 'Azure'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: az group create --location '$(azure_region)' --name $(resourcegroupName)
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'Azure'
      subscriptionId: $(subscriptionId)
      action: 'Create Or Update Resource Group'
      resourceGroupName: $(resourcegroupName)
      location: '$(azure_region)'
      templateLocation: 'Linked artifact'
      csmFile: '$(Pipeline.Workspace)/infraCode/${{ parameters.template }}'
      overrideParameters: '-applicationname todoitems -sqlAdministratorLoginUser $(todoItemsSqlAdminUser) -sqlAdministratorLoginPassword $(todoItemsSqlAdminpassword) ${{ parameters.additionalParameters }}'
      ${{ if eq( parameters.modus, 'deploy') }}:
        deploymentMode: 'Incremental'
      ${{ else }}:
        deploymentMode: 'Validation'
      deploymentOutputs: deploymentOutputs
  - ${{ if eq( parameters.modus, 'deploy') }}:
    - bash: |
          echo "##vso[task.setvariable variable=appServiceAppUrl;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.webAppUrl.value')"
          echo "##vso[task.setvariable variable=appServiceAppName;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.webAppName.value')"
          echo "##vso[task.setvariable variable=sqlServerFQDN;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.sqlServerFQDN.value')"
          echo "##vso[task.setvariable variable=databaseName;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.databaseName.value')"
      name: SaveDeploymentOutputs
      displayName: Save deployment outputs into variables
      env:
        DEPLOYMENT_OUTPUTS: $(deploymentOutputs)

- ${{ if ne( parameters.modus, 'deploy') }}:
  - job: Delete_Resourcegroup
    dependsOn: [Generate_ResourcegroupName, Create_Env]
    variables: 
    - group: AzureSecrets
    - name: resourcegroupName
      value: $[ dependencies.Generate_ResourcegroupName.outputs['DetermineResourcegroupName.resourcegroupName'] ]
    steps:
    - checkout: none
    - task: AzureCLI@2
      displayName: Delete resourcegroup
      inputs:
        azureSubscription: 'Azure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group delete --name $(resourcegroupName) --no-wait --y'
