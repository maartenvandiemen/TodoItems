parameters:
- name: postBuildSteps
  type: stepList
  default: []
- name: buildConfiguration
  type: string
  default: 'Release'
- name: testDatabasename
  type: string
  default: TodoItemsDB
- name: serviceContainerName
  type: string

jobs: 
- job: Build
  
  variables:
  #Used for SQL Server password, placed in variable group. Comment group and uncomment SA_PASSWORD variable
  #- name: SA_PASSWORD
  #  value: '<<SECRET VALUE>>'
  - group: TodoItemsApi-Build
  - name: DOTNET_NOLOGO
    value: true
    readonly: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE 
    value: true
    readonly: true
    #Override to create env variable to have control where the global packages are stored for caching: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders
  - name: NUGET_PACKAGES
    value: '$(Pipeline.Workspace)/.nuget/packages/'
    readonly: true
    
  services:
    ${{parameters.serviceContainerName}}: ${{parameters.serviceContainerName}}
        
  steps:
  - script: docker run --workdir /ado/workspace --rm -v "$(Build.SourcesDirectory)":"/ado/workspace" -v "$(Build.ArtifactStagingDirectory)/trivy":"/ado/artifact" aquasec/trivy:latest fs -f json --scanners vuln,secret,misconfig --list-all-pkgs -o /ado/artifact/trivy-result.json /ado/workspace
    #Sometimes we get a TOOMANYREQUESTS response. Retry before breaking the build in this case.
    retryCountOnTaskFailure: 3
    displayName: Run Trivy analysis
    
  - script: docker run --workdir /ado/artifact --rm -v "$(Build.ArtifactStagingDirectory)/trivy":"/ado/artifact" aquasec/trivy:latest convert -f table --exit-code -1 -s HIGH,CRITICAL trivy-result.json
    displayName: Parse Trivy analysis

  - task: PowerShell@2
    displayName: 'Determine if dotnet is installed'
    inputs:
      targetType: 'inline'
      script: |
        $installedSdks = dotnet --list-sdks
        $globalJsonLocation = Join-Path -Path "$(System.DefaultWorkingDirectory)" -ChildPath "global.json"
        $globalJson = Get-Content $globalJsonLocation -Raw | ConvertFrom-Json 
        $dotnetVersionGlobalJson = $globalJson.sdk.version
        $match = $installedSdks -like ($dotnetVersionGlobalJson + "*")
        if($match){
          Write-Host "##vso[task.setvariable variable=isDotNetVersionInstalled;]true"
        }
      pwsh: true

  - task: UseDotNet@2
    displayName: 'Install dotnet'
    condition: and(succeeded(), ne(variables['isDotNetVersionInstalled'], 'true'))
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
  
  - task: Cache@2
    displayName: 'Restore cache for NuGet'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      path: '$(NUGET_PACKAGES)'

  - task: DotNetCoreCLI@2
    displayName: Dotnet restore '**/*.csproj'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      restoreArguments: '--locked-mode'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: Dotnet build
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--no-restore --configuration ${{parameters.buildConfiguration}}'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'
      workingDirectory: '$(Build.SourcesDirectory)/TodoItems.Api'
    displayName: 'Restore dotnet tools'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: 'migrations script --output $(Build.ArtifactStagingDirectory)/SQL/db.sql --idempotent --project TodoItems.Api.csproj --context TodoDb --no-build --verbose --configuration ${{parameters.buildConfiguration}}'
      workingDirectory: '$(Build.SourcesDirectory)/TodoItems.Api'
    displayName: 'Create idempotent SQL'
    env:
      #Pass environment variable dummy. So the migration script will not be created against the InMemory database.
      ASPNETCORE_ENVIRONMENT: 'DUMMY'

  - script: |
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -Q 'CREATE DATABASE ${{parameters.testDatabasename}}' -b
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -i db.sql -d ${{parameters.testDatabasename}} -b
    workingDirectory: '$(Build.ArtifactStagingDirectory)/SQL'
    displayName: 'Create database and tables for unit tests'
    timeoutInMinutes: 1

  - task: DotNetCoreCLI@2
    displayName: Dotnet test '**/*Tests.csproj'
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '--no-build --nologo --configuration ${{parameters.buildConfiguration}}'
    env:
      integrationtests_ConnectionStrings__TodoDb: 'Server=127.0.0.1,1433;Database=${{parameters.testDatabasename}};User Id=SA;Password=$(SA_PASSWORD);TrustServerCertificate=true;'
    
  - task: DotNetCoreCLI@2
    displayName: Dotnet publish '**/TodoItems.Api.csproj' 
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/TodoItems.Api.csproj' 
      arguments: '--no-restore --configuration ${{parameters.buildConfiguration}} --nologo --no-build --output $(Build.ArtifactStagingDirectory)/todoItemsApi'
      modifyOutputPath: false
      zipAfterPublish: false

  - script: |
        az bicep build --file main.docker.webapp.bicep
        az bicep build --file main.nodocker.webapp.bicep
    displayName: Bicep linting
    workingDirectory: Deployment

  - task: PublishPipelineArtifact@1
    displayName: Publish pipeline artifact 'SQL'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/SQL'
      artifact: 'database'
      publishLocation: 'pipeline'

  - task: CopyFiles@2
    displayName: Copy Bicep files to artifact staging directory
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/Deployment'
      Contents: '*.bicep'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/Deployment'

  - task: PublishPipelineArtifact@1
    displayName: Publish pipeline artifact 'Deployment'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Deployment'
      artifact: 'infraCode'
      publishLocation: 'pipeline'
      
  - task: PublishPipelineArtifact@1
    displayName: Publish pipeline artifact 'Smoke tests'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/tests'
      artifact: 'smoketests'
      publishLocation: 'pipeline'
      
  - ${{ each step in parameters.postBuildSteps }}:
    - ${{ step }}
