on:
  workflow_call: 
    inputs:
      region:
        type: string
        required: true
        description: Azure region where the resource should be deployed
      template:
        type: string
        required: true
        description: location of the ARM or BICEP template
      additionalParameters:
        type: string
        required: false
        description: Arguments for the ARM or BICEP template
      deploy:
        type: boolean
        required: true
        default: true
        description: Specify if a deployment should be done or a validation should be performed
    secrets:
      AZURE_CREDENTIALS:
        required: true
        description: Azure Service Principal credentials
    outputs:
      webAppName:
        description: "Created webApp"
        value: ${{jobs.create_env.outputs.webAppName}}
      sqlServerFQDN: 
         description: Fully Qualified DomainName of the created Azure SQL Server
         value: ${{jobs.create_env.outputs.sqlServerFQDN}}
      databaseName:
         description: Created database
         value: ${{jobs.create_env.outputs.databaseName}}
      webAppUrl:
        description: "Created webApp url"
        value: ${{jobs.create_env.outputs.webAppUrl}}
      resourcegroup:
        description: "Random generated resource group name"
        value: ${{jobs.determine_resourcegroup.outputs.resourcegroup}}
      
defaults:
  run:
    shell: pwsh
jobs:
  determine_resourcegroup:
    runs-on: ubuntu-latest
    outputs:
      resourcegroup: ${{ steps.setupResourcegroup.outputs.resourcegroup }}
    steps:
      - name: Setup variables
        id: setupResourcegroup
        run: |
          $randomNumber = Get-Random -Minimum 10000000000 -Maximum 99999999999
          echo "resourcegroup=todoItems-$randomNumber" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
  create_env:
    runs-on: ubuntu-latest
    needs: determine_resourcegroup
    outputs:
      webAppUrl: ${{ steps.arm.outputs.webAppUrl }}
      webAppName: ${{ steps.arm.outputs.webAppName }}
      sqlServerFQDN: ${{ steps.arm.outputs.sqlServerFQDN }}
      databaseName: ${{ steps.arm.outputs.databaseName }}
    environment: AzureProvision
    steps:
      - name: Download a bicep templates
        uses: actions/download-artifact@v4
        with:
          name: infraCode
          path: ${{github.workspace}}/artifacts/bicep

      - name: Azure login
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create resourcegroup ${{ needs.determine_resourcegroup.outputs.resourcegroup }}
        uses: Azure/cli@v1
        with:
          inlineScript: az group create --location ${{ inputs.region }} --name ${{ needs.determine_resourcegroup.outputs.resourcegroup }}

      - name: Deploy Azure infrastructure
        if: ${{inputs.deploy == true}}
        uses: azure/arm-deploy@v2
        id: arm
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTION }}
          resourceGroupName: ${{ needs.determine_resourcegroup.outputs.resourcegroup }}
          template: ${{github.workspace}}${{ inputs.template }}
          parameters: ${{ inputs.additionalParameters }} sqlAdministratorLoginPassword=${{secrets.SA_PASSWORD}} sqlAdministratorLoginUser=${{secrets.AZURE_SQL_USER}}
          deploymentMode: Incremental

      - name: Validate Azure infrastructure
        if: ${{inputs.deploy != true}}
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTION }}
          resourceGroupName: ${{ needs.determine_resourcegroup.outputs.resourcegroup }}
          template: ${{github.workspace}}${{ inputs.template }}
          parameters: ${{ inputs.additionalParameters }} sqlAdministratorLoginPassword=${{secrets.SA_PASSWORD}} sqlAdministratorLoginUser=${{secrets.AZURE_SQL_USER}}
          deploymentMode: Validate
    
      - name: Delete resourcegroup ${{ needs.determine_resourcegroup.outputs.resourcegroup }}
        if: ${{inputs.deploy != true}}
        uses: Azure/cli@v1
        with:
          inlineScript: az group delete --name ${{ needs.determine_resourcegroup.outputs.resourcegroup }} --yes --no-wait 
