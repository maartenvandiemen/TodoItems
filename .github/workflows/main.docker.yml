name: Build TodoItems Docker
on: 
  schedule:
    - cron:  '0 0 * * 3'
  push:
    paths-ignore:
      - .azure-pipelines/**
      - .devcontainer/**
      - .vscode/**
  workflow_dispatch:
    inputs:
      buildConfiguration:
        description: 'Build configuration'
        required: true
        default: 'Release' 
        type: choice
        options:
        - Debug
        - Release
      pushImage:
        description: 'Push image to registry'
        required: true 
        type: boolean 
        default: false
defaults:
  run:
    shell: pwsh
jobs:
  determine_variables:
    runs-on: ubuntu-latest
    outputs:
      buildConfiguration: ${{ steps.setupVars.outputs.buildConfiguration }}
      pushImage: ${{ steps.setupVars.outputs.pushImage }}
    steps:
    - name: Setup variables
      id: setupVars
      run: |
        if("${{inputs.buildConfiguration}}"){
          echo "buildConfiguration=${{inputs.buildConfiguration}}" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        else{
          echo "buildConfiguration=Release" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        
        if("${{inputs.pushImage}}"){
          echo "pushImage=${{inputs.pushImage}}" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        else{
          echo "pushImage=false" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        
  artifacts_release:
    if: inputs.buildConfiguration != ''
    uses: ./.github/workflows/artifacts_release.yml
    
  create_env:
    needs: [artifacts_release, push_docker_image]
    uses: ./.github/workflows/create_env.yml
    with:
      resourcegroupName: ${{ needs.artifacts_release.outputs.resourcegroup }}
      region: 'eastus'
      template: /artifacts/bicep/main.docker.webapp.bicep
      additionalParameters: applicationname=todoitems dockerImageNameAndTag=${{needs.push_docker_image.outputs.dockerTag}}
    secrets: inherit
        
  dockerfile_artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dockerFile
          path: ${{github.workspace}}/TodoItems.Api/Dockerfile
          if-no-files-found: error
  
  build:  
    needs: [determine_variables]
    uses: ./.github/workflows/build.yml
    with:
      buildConfiguration: ${{needs.determine_variables.outputs.buildConfiguration}}
    secrets: inherit
  
  push_docker_image:
    runs-on: ubuntu-latest
    outputs:
      dockerTag: ${{ steps.createTag.outputs.dockerTag }}
    env:
      REGISTRY: ghcr.io
    permissions:
      contents: read
      packages: write
    needs: [build, dockerfile_artifact, determine_variables]
    steps:
      - uses: actions/download-artifact@v3
        with:
            name: todoItemsApi
            path: ${{github.workspace}}/api
            
      - uses: actions/download-artifact@v3
        with:
            name: dockerFile
            path: ${{github.workspace}}/dockerFile
            
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create docker tag
        id: createTag
        run: |
          $lowercaseRepo = "${{ github.repository }}".ToLower()
          $dockerTag="${{ env.REGISTRY }}/$lowercaseRepo`:${{ github.sha }}"
          echo "dockerTag=$dockerTag" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      - uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/api
          file: ${{github.workspace}}/dockerFile/Dockerfile
          push: ${{ needs.determine_variables.outputs.pushImage }}
          tags: ${{ steps.createTag.outputs.dockerTag }}

  deploy_db:
    needs: [build, create_env]
    uses: ./.github/workflows/deploy_db.yml
    with:
      sqlServerFQDN: ${{needs.create_env.outputs.sqlServerFQDN}}
      databaseName: ${{needs.create_env.outputs.databaseName}}
    secrets: inherit

  smoketests:
    needs: [deploy_db]
    uses: ./.github/workflows/smoketests.yml
    with:
      webAppUrl: ${{needs.create_env.outputs.webAppUrl}}

  delete_env:
    needs: [artifacts_release, smoketests]
    uses: ./.github/workflows/delete_env.yml
    with:
      resourcegroupName: ${{ needs.artifacts_release.outputs.resourcegroup }}
    secrets: inherit
